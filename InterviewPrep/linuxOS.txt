OS
    shell
        kernel
Hardware

os-

shell - interface between user and kernel,interprets the user commands and sends to kernel

kernel-interacts with underlying hardware ,by converting the inputs from shell to machine code

--distribution to distribution has some changes in kernel and shells
--shell scripts should be written specific to shell based on the shell specific syntax
--different types of shells:
            1.Bourne shell(sh) -- standard ,available mostly
            2.C shell(csh)
            3.Bash             -- advanced ,supports more commands...(default for ubuntu)
            4.Posix shell
            5.KornShell(ksh)
--different OS in linux
    ubuntu
    Cent OS
    Debian
    RedHat
    Fedora

-- through terminal....we can check telnet public_ip_address -->and can check its connectivity



windows file system
    drive-->folder-->files
    D:\\python\file1.py

linux file system
    root(/)-->home-->ubuntu-->directory-->files

--Any application installed will be in /user or /opt directories in the root directory....

--whoami                    --> gives the current user
--who                     -->       gives the current user along with date
--users -->               --> lists all users
--date                      -->gives current date
--pwd                       -->present working directory
--cd dir_path               -->goes to required directory
--cd ..                     -->move back by one directory
--cd /                      -->move  to root directory
--cd ~                      -->move to home directory
--man command_name          -->gives manual for the given command
--clear                     -->clears the screen
--ls -l                     -->list the file details in the given directory with permissions line wise
--ls -la                    --> shows hidden files also
--cat file_name             --> views the contents of given file....if no files ...creates new one ...
([dir/file][owner][group][other])
(    d       rwx    rwx     rwx )
(            421    421     421 )
--mkdir dir_name            -->create new dir
--touch file_name           -->create a file 
--------------------editing files
--vi editor
--vim editor
--nano editor

--vi file_name -->to edit the file
        --press i to insert
        --insert data
        --esc 
        --shift+:wq  -->to save changes and quit
        --shift+:q   -->to quit without saving changes
        --dd -->deletes the current row
        --yy  -->
--cp source_file_path destination_file_path     -->copy source file in destination file
--mv source_file_path destination_file_path -->moves source file to destination 
--rm file_name -->delete the file
--rmdir -r dir_path -->deletes directory along with contents in it
--cp *.txt dir_path --> copies all .txt files to specified directory  ( *  is the wild card character for multiple chars)
        ( ?  is the wild card character for single chars)
--cp dir1/* .                 -->copies all files in dir1 to the current location

--permisssions

--chmod +x file_name --> gives execute permissions to all
--chmod -x file_name -->  revoke execute permissions to all
--chmod ugo+rwx     --> add/revoke permission in specific 
--chmod 777 filename

--history -->gives history of commands of that session
-- !command_number --> to execute a command from history
--sudo command_name    --> to run a command as root user
--head -n file_name --> gives top n lines in file
--tail -n file_name --> gives buttom n lines in file
-- !! executes previous command
--ps -->gives the current processes running
--ps -f --> gives full details of current running processes
--ps -ef --> gives excutable file details for running processes for all users
--kill processid --> kills the process
--apt -->package manager for ubuntu--->to install applications in ubuntu
--sudo apt-get update  --> for updating the packages

-- whereis packagename -->gives path where that package
-- sudo ln -s link_name filename_to_be_linked -->creates a shortcut link
--env -->gives list of all environment variables
--echo $SHELL  -->gives the shell we are using  
--echo $PATH  -->gives value of the env variable PATH

----PIPE( | )

-- ps -f | sort  -->process list gets sorted
-- ls -l | sort +4  --> sorts the listed op in based on 4th column

--ls -l | grep pattern  --> list files containing that pattern (no wild card chars needed)
 
--ls -l | grep pattern -i  --> ignores case and shows matched pattern
--ls -l | grep pattern -v  --> records unmatch with 
--ls -l | grep pattern -ic  --> ignores case and gives count matched pattern
--ls -l | grep pattern -iv  --> ignores case and shows unmatched pattern
--ls -l | grep pattern > out.txt -->overwrites to out.txt
--ls -l | grep pattern >> out.txt -->appends into out.txt

-- cat cities.txt | grep -i new > newcities.txt   --> contents containing 'new' are selected and send to newcities.txt
-- grep -i new cities.txt > newcities.txt         --> contents containing 'new' are selected and send to newcities.txt
--cat cities.txt | grep -i new |sed  's/new/old/gi' > oldcities.txt  -->replacing new with old  ( g means global ->replace all.., s means serach,...i means case insensitive)




-----------------------------SHELL SCRIPTING-----------------

---#!/bin/sh
-- executing shell script                           --> sh/bash/ksh filenameor path
-- executing shell script  as executable            --> ./ filenameor path

--!!! while assignment we should not give spaces before and after equalto sign

if [ expression 1 ]
then
   Statement(s) to be executed if expression 1 is true
elif [ expression 2 ]
then
   Statement(s) to be executed if expression 2 is true
elif [ expression 3 ]
then
   Statement(s) to be executed if expression 3 is true
else
   Statement(s) to be executed if no expression is true
fi



-Q1-
---using script and create dir "assignments" under /home/ubuntu/shell-scripts
   create file "cities.txt"
   add city name into file
   filter city names contain new 
   replace new with old
   write the output to "old-cities.txt"

   include loop and conditionals in it ...

--cloning repo into ubuntu

git clone https://github.com/asaravanakumar/futurense_hadoop-pyspark

-------------special varibles
-- echo "$0" --> filename of script
--echo "$1"   --->gives first argument
----echo "$n"   --->gives nth argument
---echo "$#"  --> gives no of arguments
---echo "$*"  --->gives all the arguments passed
---echo "$HOME" -->gives home path
--echo $@ --->gives all the arguments
--echo $$ -->process id of the current shell
--echo $? -->status of last command
--echo $USER  -->gives the current user


-------------arithmetic operators
-----there should be space before and after operator to work properly
---`expr $a + $b` 
---`expr $a \* $b` 
---[$a == $b] --->checking equality
---[$a != $b] --->checking not equal
= and == are for string comparisons
-eq is for numeric comparisons
-eq is in the same family as -lt, -le, -gt, -ge, and -ne


---tar to untar  and zip and unzip

--tar -czvf filename.tgz path1 path2 path3 ...(path1,2,3 are paths of file to be compressed)
--tar -xzvf filename.tgz -C path_fbbb                                                                                                                                                                                                                                          or_extraction
--zip -r zipfilename.zip path1 path2 path3
--unzip zipfilefilename.zip -d path_to_unzip



--crontab
--crontab -l
--crontab generator
--crontab -e   -->to edit

tr`[]`[]
wc -l | <a >b&
& --indicates run in background




hardware interaction --> kernel
symbolic link --> ?
finished exec,but status  not collected yet such process--->zombie
cron  daemon -->
grep -vn "abc" ---not match lines
rm chap0[1 - 3] --> remove file chap0[1 - 3]
discard output of command --> backup.sh >> /dev/null &
cat << eof ndk eof  -->?
echo ${array[0]} -- first element of array



function_name (){
    st1..
    st2..
    .
    .
    .
    return value
}
 






    